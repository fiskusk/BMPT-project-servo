
servo_v0.01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000007fe  00000892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080012c  0080012c  000008be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000930  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001845  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b88  00000000  00000000  000022bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d03  00000000  00000000  00002e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00003b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  00003e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cda  00000000  00000000  0000444f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005129  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_1>
   8:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_18>
  4c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 37       	cpi	r26, 0x7B	; 123
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
  9e:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <transfer>:

.global transfer
.func transfer

transfer:
	push r16
  a6:	0f 93       	push	r16
	push r17
  a8:	1f 93       	push	r17

	ldi r17, 0b101
  aa:	15 e0       	ldi	r17, 0x05	; 5
	ldi r16, 0b11011100
  ac:	0c ed       	ldi	r16, 0xDC	; 220

	sub r24, r16
  ae:	80 1b       	sub	r24, r16
	sbc r25, r17
  b0:	91 0b       	sbc	r25, r17

	pop r17
  b2:	1f 91       	pop	r17
	pop r16
  b4:	0f 91       	pop	r16

	ret
  b6:	08 95       	ret

000000b8 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  b8:	40 9a       	sbi	0x08, 0	; 8
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <toggle_e+0x4>
  c0:	00 00       	nop
  c2:	40 98       	cbi	0x08, 0	; 8
  c4:	08 95       	ret

000000c6 <lcd_write>:
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
  ca:	66 23       	and	r22, r22
  cc:	11 f0       	breq	.+4      	; 0xd2 <lcd_write+0xc>
  ce:	28 9a       	sbi	0x05, 0	; 5
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <lcd_write+0xe>
  d2:	28 98       	cbi	0x05, 0	; 5
  d4:	2d 98       	cbi	0x05, 5	; 5
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	55 9a       	sbi	0x0a, 5	; 10
  da:	56 9a       	sbi	0x0a, 6	; 10
  dc:	57 9a       	sbi	0x0a, 7	; 10
  de:	5f 98       	cbi	0x0b, 7	; 11
  e0:	5e 98       	cbi	0x0b, 6	; 11
  e2:	5d 98       	cbi	0x0b, 5	; 11
  e4:	5c 98       	cbi	0x0b, 4	; 11
  e6:	cc 23       	and	r28, r28
  e8:	0c f4       	brge	.+2      	; 0xec <lcd_write+0x26>
  ea:	5f 9a       	sbi	0x0b, 7	; 11
  ec:	c6 fd       	sbrc	r28, 6
  ee:	5e 9a       	sbi	0x0b, 6	; 11
  f0:	c5 fd       	sbrc	r28, 5
  f2:	5d 9a       	sbi	0x0b, 5	; 11
  f4:	c4 fd       	sbrc	r28, 4
  f6:	5c 9a       	sbi	0x0b, 4	; 11
  f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
  fc:	5f 98       	cbi	0x0b, 7	; 11
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	5d 98       	cbi	0x0b, 5	; 11
 102:	5c 98       	cbi	0x0b, 4	; 11
 104:	c3 fd       	sbrc	r28, 3
 106:	5f 9a       	sbi	0x0b, 7	; 11
 108:	c2 fd       	sbrc	r28, 2
 10a:	5e 9a       	sbi	0x0b, 6	; 11
 10c:	c1 fd       	sbrc	r28, 1
 10e:	5d 9a       	sbi	0x0b, 5	; 11
 110:	c0 fd       	sbrc	r28, 0
 112:	5c 9a       	sbi	0x0b, 4	; 11
 114:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 118:	5c 9a       	sbi	0x0b, 4	; 11
 11a:	5d 9a       	sbi	0x0b, 5	; 11
 11c:	5e 9a       	sbi	0x0b, 6	; 11
 11e:	5f 9a       	sbi	0x0b, 7	; 11
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <lcd_read>:
 124:	88 23       	and	r24, r24
 126:	11 f0       	breq	.+4      	; 0x12c <lcd_read+0x8>
 128:	28 9a       	sbi	0x05, 0	; 5
 12a:	01 c0       	rjmp	.+2      	; 0x12e <lcd_read+0xa>
 12c:	28 98       	cbi	0x05, 0	; 5
 12e:	2d 9a       	sbi	0x05, 5	; 5
 130:	54 98       	cbi	0x0a, 4	; 10
 132:	55 98       	cbi	0x0a, 5	; 10
 134:	56 98       	cbi	0x0a, 6	; 10
 136:	57 98       	cbi	0x0a, 7	; 10
 138:	40 9a       	sbi	0x08, 0	; 8
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_read+0x18>
 140:	00 00       	nop
 142:	4c 9b       	sbis	0x09, 4	; 9
 144:	02 c0       	rjmp	.+4      	; 0x14a <lcd_read+0x26>
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	01 c0       	rjmp	.+2      	; 0x14c <lcd_read+0x28>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	4d 99       	sbic	0x09, 5	; 9
 14e:	80 62       	ori	r24, 0x20	; 32
 150:	4e 99       	sbic	0x09, 6	; 9
 152:	80 64       	ori	r24, 0x40	; 64
 154:	4f 99       	sbic	0x09, 7	; 9
 156:	80 68       	ori	r24, 0x80	; 128
 158:	40 98       	cbi	0x08, 0	; 8
 15a:	95 e0       	ldi	r25, 0x05	; 5
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_read+0x38>
 160:	00 00       	nop
 162:	40 9a       	sbi	0x08, 0	; 8
 164:	95 e0       	ldi	r25, 0x05	; 5
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_read+0x42>
 16a:	00 00       	nop
 16c:	4c 99       	sbic	0x09, 4	; 9
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	4d 99       	sbic	0x09, 5	; 9
 172:	82 60       	ori	r24, 0x02	; 2
 174:	4e 99       	sbic	0x09, 6	; 9
 176:	84 60       	ori	r24, 0x04	; 4
 178:	4f 99       	sbic	0x09, 7	; 9
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	40 98       	cbi	0x08, 0	; 8
 17e:	08 95       	ret

00000180 <lcd_waitbusy>:
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 92 00 	call	0x124	; 0x124 <lcd_read>
 186:	88 23       	and	r24, r24
 188:	dc f3       	brlt	.-10     	; 0x180 <lcd_waitbusy>
 18a:	85 e1       	ldi	r24, 0x15	; 21
 18c:	8a 95       	dec	r24
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_waitbusy+0xc>
 190:	00 00       	nop
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 92 00 	call	0x124	; 0x124 <lcd_read>
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
 19e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_waitbusy>
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	8c 2f       	mov	r24, r28
 1a6:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write>
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd_data>:
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
 1b2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_waitbusy>
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	8c 2f       	mov	r24, r28
 1ba:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write>
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_gotoxy>:
 1c2:	61 11       	cpse	r22, r1
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <lcd_gotoxy+0xc>
 1c6:	80 58       	subi	r24, 0x80	; 128
 1c8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1cc:	08 95       	ret
 1ce:	80 54       	subi	r24, 0x40	; 64
 1d0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1d4:	08 95       	ret

000001d6 <lcd_clrscr>:
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1dc:	08 95       	ret

000001de <lcd_putc>:
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
 1e2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_waitbusy>
 1e6:	ca 30       	cpi	r28, 0x0A	; 10
 1e8:	49 f4       	brne	.+18     	; 0x1fc <lcd_putc+0x1e>
 1ea:	80 34       	cpi	r24, 0x40	; 64
 1ec:	10 f0       	brcs	.+4      	; 0x1f2 <lcd_putc+0x14>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <lcd_putc+0x16>
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	80 58       	subi	r24, 0x80	; 128
 1f6:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <lcd_putc+0x26>
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write>
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <lcd_puts>:
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
 20e:	21 96       	adiw	r28, 0x01	; 1
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	29 f0       	breq	.+10     	; 0x222 <lcd_puts+0x1a>
 218:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
 21c:	89 91       	ld	r24, Y+
 21e:	81 11       	cpse	r24, r1
 220:	fb cf       	rjmp	.-10     	; 0x218 <lcd_puts+0x10>
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 228:	cf 93       	push	r28
 22a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 22c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 22e:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 230:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 232:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 234:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 236:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 238:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	99 ef       	ldi	r25, 0xF9	; 249
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_init+0x16>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_init+0x1c>
 244:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 246:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 248:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 24a:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 24e:	8f e1       	ldi	r24, 0x1F	; 31
 250:	9e e4       	ldi	r25, 0x4E	; 78
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x2a>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x30>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 25a:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd_init+0x3a>
 266:	00 c0       	rjmp	.+0      	; 0x268 <lcd_init+0x40>
 268:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 26a:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_init+0x4a>
 276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_init+0x50>
 278:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 27a:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 27c:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x5c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_init+0x62>
 28a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 28c:	88 e2       	ldi	r24, 0x28	; 40
 28e:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 292:	88 e0       	ldi	r24, 0x08	; 8
 294:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                           /* display clear                */
 298:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>

}/* lcd_init */
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <show>:
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2ac:	4a e0       	ldi	r20, 0x0A	; 10
 2ae:	62 e7       	ldi	r22, 0x72	; 114
 2b0:	71 e0       	ldi	r23, 0x01	; 1
 2b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 2b6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 2ba:	0e 94 c8 03 	call	0x790	; 0x790 <__itoa_ncheck>
*********************************************************************************/
void show()
{
	
	itoa(d,buffer,10);				// conversion numerical system from d to buffer. Third parameter define desired numerical system.
	lcd_gotoxy(6,0);				// go to line 1 and 0 character
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
	lcd_puts(buffer);				// and print content of buffer (pulse width)
 2c6:	82 e7       	ldi	r24, 0x72	; 114
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	lcd_puts("us ");			// print units
 2ce:	83 e1       	ldi	r24, 0x13	; 19
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	
	lcd_gotoxy(6,1);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
	itoa(transfer(d)/10,buffer,10);
 2de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 2e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 2e6:	0e 94 53 00 	call	0xa6	; 0xa6 <transfer>
 2ea:	6a e0       	ldi	r22, 0x0A	; 10
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	0e 94 a0 03 	call	0x740	; 0x740 <__divmodhi4>
 2f2:	cb 01       	movw	r24, r22
 2f4:	4a e0       	ldi	r20, 0x0A	; 10
 2f6:	62 e7       	ldi	r22, 0x72	; 114
 2f8:	71 e0       	ldi	r23, 0x01	; 1
 2fa:	0e 94 c8 03 	call	0x790	; 0x790 <__itoa_ncheck>
	lcd_puts(buffer);
 2fe:	82 e7       	ldi	r24, 0x72	; 114
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	lcd_putc(',');
 306:	8c e2       	ldi	r24, 0x2C	; 44
 308:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
	itoa(abs(transfer(d)) % 10,buffer,10);
 30c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 310:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 314:	0e 94 53 00 	call	0xa6	; 0xa6 <transfer>
 318:	99 23       	and	r25, r25
 31a:	1c f4       	brge	.+6      	; 0x322 <show+0x76>
 31c:	91 95       	neg	r25
 31e:	81 95       	neg	r24
 320:	91 09       	sbc	r25, r1
 322:	6a e0       	ldi	r22, 0x0A	; 10
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	0e 94 a0 03 	call	0x740	; 0x740 <__divmodhi4>
 32a:	4a e0       	ldi	r20, 0x0A	; 10
 32c:	62 e7       	ldi	r22, 0x72	; 114
 32e:	71 e0       	ldi	r23, 0x01	; 1
 330:	0e 94 c8 03 	call	0x790	; 0x790 <__itoa_ncheck>
	lcd_puts(buffer);
 334:	82 e7       	ldi	r24, 0x72	; 114
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	lcd_putc(0b11011111);
 33c:	8f ed       	ldi	r24, 0xDF	; 223
 33e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
	lcd_puts(" ");
 342:	8a e1       	ldi	r24, 0x1A	; 26
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	
	/*print step size */
	if (step == 100)				//first goto xy based on size of value step size
 34a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 34e:	84 36       	cpi	r24, 0x64	; 100
 350:	29 f4       	brne	.+10     	; 0x35c <show+0xb0>
		lcd_gotoxy(13,1);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	8d e0       	ldi	r24, 0x0D	; 13
 356:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
 35a:	27 c0       	rjmp	.+78     	; 0x3aa <show+0xfe>
	else if ((step == 50) | (step == 20) | (step == 10)){
 35c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 360:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 364:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	82 33       	cpi	r24, 0x32	; 50
 36c:	09 f0       	breq	.+2      	; 0x370 <show+0xc4>
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	24 31       	cpi	r18, 0x14	; 20
 374:	09 f0       	breq	.+2      	; 0x378 <show+0xcc>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	89 2b       	or	r24, r25
 37a:	31 f4       	brne	.+12     	; 0x388 <show+0xdc>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	3a 30       	cpi	r19, 0x0A	; 10
 380:	09 f0       	breq	.+2      	; 0x384 <show+0xd8>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	88 23       	and	r24, r24
 386:	49 f0       	breq	.+18     	; 0x39a <show+0xee>
		lcd_puts("   ");
 388:	88 e1       	ldi	r24, 0x18	; 24
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
		lcd_gotoxy(14,1);}
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	8e e0       	ldi	r24, 0x0E	; 14
 394:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
 398:	08 c0       	rjmp	.+16     	; 0x3aa <show+0xfe>
	else{
		lcd_puts("    ");
 39a:	87 e1       	ldi	r24, 0x17	; 23
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
		lcd_gotoxy(15,1);}
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	8f e0       	ldi	r24, 0x0F	; 15
 3a6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
	itoa(step,buffer,10);			// convert again, now step, save to buffer, decimal num. system
 3aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3ae:	4a e0       	ldi	r20, 0x0A	; 10
 3b0:	62 e7       	ldi	r22, 0x72	; 114
 3b2:	71 e0       	ldi	r23, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 c8 03 	call	0x790	; 0x790 <__itoa_ncheck>
	lcd_puts(buffer);				// print step and two spaces
 3ba:	82 e7       	ldi	r24, 0x72	; 114
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	lcd_puts("  ");
 3c2:	89 e1       	ldi	r24, 0x19	; 25
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
 3ca:	08 95       	ret

000003cc <setup>:
*				  registers for PORTs, interrupts, display initialization
*
*********************************************************************************/

void setup()
{
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	60 97       	sbiw	r28, 0x10	; 16
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
	// Setup for used PORTS
	DDRB |= 1<<2;					// set bit PB2 as output port for servo
 3e8:	22 9a       	sbi	0x04, 2	; 4
	DDRB &= ~(1<<1);				// set bit PB1 as input for rotary encoder
 3ea:	21 98       	cbi	0x04, 1	; 4
	DDRD &= ~(1<<2);				// set bit PD2 as input for rotary encoder
 3ec:	52 98       	cbi	0x0a, 2	; 10
	DDRD &= ~(1<<3);				// set bit PD3 as input step size button
 3ee:	53 98       	cbi	0x0a, 3	; 10
	DDRB &= ~(1<<3);				// set bit PB3 as input reset pulse
 3f0:	23 98       	cbi	0x04, 3	; 4
	PORTD |= 1<<2;					// activate internal pull-up resistors on bit PD2
 3f2:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD |= 1<<3;					// activate internal pull-up resistors on bit PD3
 3f4:	5b 9a       	sbi	0x0b, 3	; 11
	PORTB |= 1<<1;					// activate internal pull-up resistors on bit PB1
 3f6:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= 1<<3;					// activate internal pull-up resistors on bit PB3
 3f8:	2b 9a       	sbi	0x05, 3	; 5
	
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
 3fa:	87 e6       	ldi	r24, 0x67	; 103
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 87 03 	call	0x70e	; 0x70e <uart_init>
	/* MOD 12  Fast PWM*/	
//	TCCR1A = (1<<WGM11) | (1<<WGM10) | (1<<COM1B1);
//	TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);
	
	/* MOD 9 Phase correct */	
	TCCR1A = (1<<WGM10) | (1<<COM1B1);
 402:	81 e2       	ldi	r24, 0x21	; 33
 404:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<WGM13) | (1<<CS11);
 408:	82 e1       	ldi	r24, 0x12	; 18
 40a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	//setup interrupt OCIEA
	TIMSK1 |= 1<<OCIE1A;
 40e:	ef e6       	ldi	r30, 0x6F	; 111
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	82 60       	ori	r24, 0x02	; 2
 416:	80 83       	st	Z, r24
	
	// setup interrupt for rotary encoder
	EICRA |= 1<<ISC01;				// the falling edge on INT0 (PD2) generate interrupt request
 418:	e9 e6       	ldi	r30, 0x69	; 105
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	80 83       	st	Z, r24
	EIMSK |= 1<<INT0;				// enable external interrupt request from INT0 (PD2)
 422:	e8 9a       	sbi	0x1d, 0	; 29
	
	// setup interupt for step size button
	EICRA |= 1<<ISC11;				// the falling edge on INT1 (PD3) generate interrupt request
 424:	80 81       	ld	r24, Z
 426:	88 60       	ori	r24, 0x08	; 8
 428:	80 83       	st	Z, r24
	EIMSK |= 1<<INT1;				// enable external interrupt request from INT1 (PD3)
 42a:	e9 9a       	sbi	0x1d, 1	; 29
	
	sei();							// enable all interrupts
 42c:	78 94       	sei
	
	// display initialization 
	lcd_init(LCD_DISP_ON);			// display on
 42e:	8c e0       	ldi	r24, 0x0C	; 12
 430:	0e 94 14 01 	call	0x228	; 0x228 <lcd_init>
	
	/* Add new symbol  up and down */
	char new_symbol[] = {	0b00100,
 434:	80 e1       	ldi	r24, 0x10	; 16
 436:	e3 e0       	ldi	r30, 0x03	; 3
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	de 01       	movw	r26, r28
 43c:	11 96       	adiw	r26, 0x01	; 1
 43e:	01 90       	ld	r0, Z+
 440:	0d 92       	st	X+, r0
 442:	8a 95       	dec	r24
 444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
							0b00100,
							0b00100,
							0b10101,
							0b01110,
							0b00100};
	lcd_command(1<<LCD_CGRAM);		
 446:	80 e4       	ldi	r24, 0x40	; 64
 448:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 44c:	8e 01       	movw	r16, r28
 44e:	0f 5f       	subi	r16, 0xFF	; 255
 450:	1f 4f       	sbci	r17, 0xFF	; 255
 452:	7e 01       	movw	r14, r28
 454:	81 e1       	ldi	r24, 0x11	; 17
 456:	e8 0e       	add	r14, r24
 458:	f1 1c       	adc	r15, r1
	for (uint8_t i = 0; i < 16; i++)
		lcd_data(new_symbol[i]);
 45a:	f8 01       	movw	r30, r16
 45c:	81 91       	ld	r24, Z+
 45e:	8f 01       	movw	r16, r30
 460:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_data>
							0b00100,
							0b10101,
							0b01110,
							0b00100};
	lcd_command(1<<LCD_CGRAM);		
	for (uint8_t i = 0; i < 16; i++)
 464:	0e 15       	cp	r16, r14
 466:	1f 05       	cpc	r17, r15
 468:	c1 f7       	brne	.-16     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		lcd_data(new_symbol[i]);
	
	/* print introduction */
	lcd_clrscr();					// clear display
 46a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_clrscr>
	lcd_gotoxy(0,0);				// go to zero line and zero character
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
	lcd_puts("Width");				// print on display text
 476:	8c e1       	ldi	r24, 0x1C	; 28
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	lcd_gotoxy(0,1);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
	lcd_puts("Angle");
 486:	82 e2       	ldi	r24, 0x22	; 34
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	lcd_gotoxy(13,0);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	8d e0       	ldi	r24, 0x0D	; 13
 492:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
	lcd_puts("St");
 496:	88 e2       	ldi	r24, 0x28	; 40
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	lcd_putc(1);
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
	
	// set period T = 20 ms, f = 50 Hz. This is define TOP of counter.
	OCR1A = 20000;
 4a4:	80 e2       	ldi	r24, 0x20	; 32
 4a6:	9e e4       	ldi	r25, 0x4E	; 78
 4a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}
 4b0:	60 96       	adiw	r28, 0x10	; 16
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	08 95       	ret

000004ca <main>:


int main(void)
{
	setup();						// system initialization
 4ca:	0e 94 e6 01 	call	0x3cc	; 0x3cc <setup>
* Description	: set correct OCR1B registers bit, which define pulse width time (tON) PWM waveform
*
*********************************************************************************/
void set_duty(uint16_t duty)
{
	OCR1B = duty;					// value correction
 4ce:	ca e8       	ldi	r28, 0x8A	; 138
 4d0:	d0 e0       	ldi	r29, 0x00	; 0
		
	while (1)
	{
		
		
		set_duty(d);				// set OCR1B registers bit which define d = tON time PWM waveform
 4d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 4d6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
* Description	: set correct OCR1B registers bit, which define pulse width time (tON) PWM waveform
*
*********************************************************************************/
void set_duty(uint16_t duty)
{
	OCR1B = duty;					// value correction
 4da:	99 83       	std	Y+1, r25	; 0x01
 4dc:	88 83       	st	Y, r24
	while (1)
	{
		
		
		set_duty(d);				// set OCR1B registers bit which define d = tON time PWM waveform
		show(d);					// print the pulse width d = tON  on the display
 4de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 4e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 4e6:	0e 94 56 01 	call	0x2ac	; 0x2ac <show>
 4ea:	f3 cf       	rjmp	.-26     	; 0x4d2 <main+0x8>

000004ec <__vector_1>:
* Function Name : INT0_vect
* Description	: interrupt from INT1 service rotary encoder on PB1 (up/dw) and PD2 (INT0)
*
*********************************************************************************/
ISR(INT0_vect)
{	/*
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
			d = 615;				// if achieve low limit edge -> fill constant d fixed value of low limit and don't decrement
			}
	}*/
	
	/* ternary operation, which fill variable s value = step*either -1, if PINB1 is in HI, or +1, if PINB1 is in LOW */
	int16_t s = step * ((PINB & (1<<1)) ? -1 : 1);	
 506:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	19 99       	sbic	0x03, 1	; 3
 50e:	03 c0       	rjmp	.+6      	; 0x516 <__vector_1+0x2a>
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <__vector_1+0x2e>
 516:	4f ef       	ldi	r20, 0xFF	; 255
 518:	5f ef       	ldi	r21, 0xFF	; 255
 51a:	48 9f       	mul	r20, r24
 51c:	90 01       	movw	r18, r0
 51e:	49 9f       	mul	r20, r25
 520:	30 0d       	add	r19, r0
 522:	58 9f       	mul	r21, r24
 524:	30 0d       	add	r19, r0
 526:	11 24       	eor	r1, r1
	
	/* if new d after do this routine is in range from 615 to 2100 -> do routine. s > or < 0 shows if new value will increment or decrement  */
	if (( (d+step) <= 2100 && s > 0 ) || ( (d-step) >= 615 && s < 0 ))
 528:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 52c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 530:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 534:	bc 01       	movw	r22, r24
 536:	64 0f       	add	r22, r20
 538:	71 1d       	adc	r23, r1
 53a:	ab 01       	movw	r20, r22
 53c:	45 33       	cpi	r20, 0x35	; 53
 53e:	58 40       	sbci	r21, 0x08	; 8
 540:	20 f4       	brcc	.+8      	; 0x54a <__vector_1+0x5e>
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	64 f0       	brlt	.+24     	; 0x560 <__vector_1+0x74>
 548:	22 c0       	rjmp	.+68     	; 0x58e <__vector_1+0xa2>
 54a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 54e:	bc 01       	movw	r22, r24
 550:	64 1b       	sub	r22, r20
 552:	71 09       	sbc	r23, r1
 554:	ab 01       	movw	r20, r22
 556:	47 36       	cpi	r20, 0x67	; 103
 558:	52 40       	sbci	r21, 0x02	; 2
 55a:	48 f0       	brcs	.+18     	; 0x56e <__vector_1+0x82>
 55c:	33 23       	and	r19, r19
 55e:	3c f4       	brge	.+14     	; 0x56e <__vector_1+0x82>
		{
			d += s;					// routine: fill with new value d+s
 560:	82 0f       	add	r24, r18
 562:	93 1f       	adc	r25, r19
 564:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <d+0x1>
 568:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <d>
 56c:	1e c0       	rjmp	.+60     	; 0x5aa <__vector_1+0xbe>
		}
	else
		d = (s > 0) ? 2100 : 615;	// else in range from 615 to 2100 set fixed value
 56e:	12 16       	cp	r1, r18
 570:	13 06       	cpc	r1, r19
 572:	1c f0       	brlt	.+6      	; 0x57a <__vector_1+0x8e>
 574:	87 e6       	ldi	r24, 0x67	; 103
 576:	92 e0       	ldi	r25, 0x02	; 2
 578:	05 c0       	rjmp	.+10     	; 0x584 <__vector_1+0x98>
 57a:	84 e3       	ldi	r24, 0x34	; 52
 57c:	98 e0       	ldi	r25, 0x08	; 8
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__vector_1+0x98>
 580:	87 e6       	ldi	r24, 0x67	; 103
 582:	92 e0       	ldi	r25, 0x02	; 2
 584:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <d+0x1>
 588:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <d>
}
 58c:	0e c0       	rjmp	.+28     	; 0x5aa <__vector_1+0xbe>
	
	/* ternary operation, which fill variable s value = step*either -1, if PINB1 is in HI, or +1, if PINB1 is in LOW */
	int16_t s = step * ((PINB & (1<<1)) ? -1 : 1);	
	
	/* if new d after do this routine is in range from 615 to 2100 -> do routine. s > or < 0 shows if new value will increment or decrement  */
	if (( (d+step) <= 2100 && s > 0 ) || ( (d-step) >= 615 && s < 0 ))
 58e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 592:	bc 01       	movw	r22, r24
 594:	64 1b       	sub	r22, r20
 596:	71 09       	sbc	r23, r1
 598:	ab 01       	movw	r20, r22
 59a:	47 36       	cpi	r20, 0x67	; 103
 59c:	52 40       	sbci	r21, 0x02	; 2
 59e:	80 f3       	brcs	.-32     	; 0x580 <__vector_1+0x94>
 5a0:	33 23       	and	r19, r19
 5a2:	f4 f2       	brlt	.-68     	; 0x560 <__vector_1+0x74>
		{
			d += s;					// routine: fill with new value d+s
		}
	else
		d = (s > 0) ? 2100 : 615;	// else in range from 615 to 2100 set fixed value
 5a4:	87 e6       	ldi	r24, 0x67	; 103
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	ed cf       	rjmp	.-38     	; 0x584 <__vector_1+0x98>
}
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <__vector_2>:
* Function Name : INT1_vect
* Description	: interrupt from INT1 service change step size on PD3 (INT1)
*
*********************************************************************************/
ISR(INT1_vect)
{
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	8f 93       	push	r24
	static uint8_t status = 0;				// preset status of step size
	switch(status)
 5d0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	69 f0       	breq	.+26     	; 0x5f2 <__vector_2+0x2e>
 5d8:	28 f0       	brcs	.+10     	; 0x5e4 <__vector_2+0x20>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	89 f0       	breq	.+34     	; 0x600 <__vector_2+0x3c>
 5de:	83 30       	cpi	r24, 0x03	; 3
 5e0:	b1 f0       	breq	.+44     	; 0x60e <__vector_2+0x4a>
 5e2:	1c c0       	rjmp	.+56     	; 0x61c <__vector_2+0x58>
	{
		case 0:
			step = 5;
 5e4:	85 e0       	ldi	r24, 0x05	; 5
 5e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			status++;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			break;
 5f0:	1a c0       	rjmp	.+52     	; 0x626 <__vector_2+0x62>
		case 1:
			step = 10;
 5f2:	8a e0       	ldi	r24, 0x0A	; 10
 5f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			status++;
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			break;
 5fe:	13 c0       	rjmp	.+38     	; 0x626 <__vector_2+0x62>
		case 2:
			step = 20;
 600:	84 e1       	ldi	r24, 0x14	; 20
 602:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			status++;
 606:	83 e0       	ldi	r24, 0x03	; 3
 608:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			break;
 60c:	0c c0       	rjmp	.+24     	; 0x626 <__vector_2+0x62>
		case 3:
			step = 50;
 60e:	82 e3       	ldi	r24, 0x32	; 50
 610:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			status++;
 614:	84 e0       	ldi	r24, 0x04	; 4
 616:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			break;
 61a:	05 c0       	rjmp	.+10     	; 0x626 <__vector_2+0x62>
		default:
			step = 100;
 61c:	84 e6       	ldi	r24, 0x64	; 100
 61e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			status = 0;
 622:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
	}
}
 626:	8f 91       	pop	r24
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 632:	1f 92       	push	r1
 634:	0f 92       	push	r0
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	0f 92       	push	r0
 63a:	11 24       	eor	r1, r1
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
	if (bit_is_clear(PINB,3))
 640:	1b 99       	sbic	0x03, 3	; 3
 642:	06 c0       	rjmp	.+12     	; 0x650 <__vector_11+0x1e>
		d = 1500;
 644:	8c ed       	ldi	r24, 0xDC	; 220
 646:	95 e0       	ldi	r25, 0x05	; 5
 648:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <d+0x1>
 64c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <d>
 650:	9f 91       	pop	r25
 652:	8f 91       	pop	r24
 654:	0f 90       	pop	r0
 656:	0f be       	out	0x3f, r0	; 63
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
 668:	2f 93       	push	r18
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 672:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 676:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 67a:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 67c:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <UART_RxHead>
 680:	ef 5f       	subi	r30, 0xFF	; 255
 682:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 684:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <UART_RxTail>
 688:	e9 17       	cp	r30, r25
 68a:	39 f0       	breq	.+14     	; 0x69a <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 68c:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	ee 5c       	subi	r30, 0xCE	; 206
 694:	fe 4f       	sbci	r31, 0xFE	; 254
 696:	20 83       	st	Z, r18
 698:	01 c0       	rjmp	.+2      	; 0x69c <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 69a:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 69c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <UART_LastRxError>
 6a0:	89 2b       	or	r24, r25
 6a2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <UART_LastRxError>
}
 6a6:	ff 91       	pop	r31
 6a8:	ef 91       	pop	r30
 6aa:	9f 91       	pop	r25
 6ac:	8f 91       	pop	r24
 6ae:	2f 91       	pop	r18
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
 6c8:	ef 93       	push	r30
 6ca:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 6cc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <UART_TxHead>
 6d0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <UART_TxTail>
 6d4:	98 17       	cp	r25, r24
 6d6:	69 f0       	breq	.+26     	; 0x6f2 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 6d8:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <UART_TxTail>
 6dc:	ef 5f       	subi	r30, 0xFF	; 255
 6de:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 6e0:	e0 93 30 01 	sts	0x0130, r30	; 0x800130 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	ee 5a       	subi	r30, 0xAE	; 174
 6e8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ea:	80 81       	ld	r24, Z
 6ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6f0:	05 c0       	rjmp	.+10     	; 0x6fc <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 6f2:	e1 ec       	ldi	r30, 0xC1	; 193
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	8f 7d       	andi	r24, 0xDF	; 223
 6fa:	80 83       	st	Z, r24
    }
}
 6fc:	ff 91       	pop	r31
 6fe:	ef 91       	pop	r30
 700:	9f 91       	pop	r25
 702:	8f 91       	pop	r24
 704:	0f 90       	pop	r0
 706:	0f be       	out	0x3f, r0	; 63
 708:	0f 90       	pop	r0
 70a:	1f 90       	pop	r1
 70c:	18 95       	reti

0000070e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 70e:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <UART_TxHead>
    UART_TxTail = 0;
 712:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <UART_TxTail>
    UART_RxHead = 0;
 716:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <UART_RxHead>
    UART_RxTail = 0;
 71a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 71e:	99 23       	and	r25, r25
 720:	1c f4       	brge	.+6      	; 0x728 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 722:	22 e0       	ldi	r18, 0x02	; 2
 724:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 728:	90 78       	andi	r25, 0x80	; 128
 72a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 72e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 732:	88 e9       	ldi	r24, 0x98	; 152
 734:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 738:	86 e0       	ldi	r24, 0x06	; 6
 73a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 73e:	08 95       	ret

00000740 <__divmodhi4>:
 740:	97 fb       	bst	r25, 7
 742:	07 2e       	mov	r0, r23
 744:	16 f4       	brtc	.+4      	; 0x74a <__divmodhi4+0xa>
 746:	00 94       	com	r0
 748:	07 d0       	rcall	.+14     	; 0x758 <__divmodhi4_neg1>
 74a:	77 fd       	sbrc	r23, 7
 74c:	09 d0       	rcall	.+18     	; 0x760 <__divmodhi4_neg2>
 74e:	0e 94 b4 03 	call	0x768	; 0x768 <__udivmodhi4>
 752:	07 fc       	sbrc	r0, 7
 754:	05 d0       	rcall	.+10     	; 0x760 <__divmodhi4_neg2>
 756:	3e f4       	brtc	.+14     	; 0x766 <__divmodhi4_exit>

00000758 <__divmodhi4_neg1>:
 758:	90 95       	com	r25
 75a:	81 95       	neg	r24
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	08 95       	ret

00000760 <__divmodhi4_neg2>:
 760:	70 95       	com	r23
 762:	61 95       	neg	r22
 764:	7f 4f       	sbci	r23, 0xFF	; 255

00000766 <__divmodhi4_exit>:
 766:	08 95       	ret

00000768 <__udivmodhi4>:
 768:	aa 1b       	sub	r26, r26
 76a:	bb 1b       	sub	r27, r27
 76c:	51 e1       	ldi	r21, 0x11	; 17
 76e:	07 c0       	rjmp	.+14     	; 0x77e <__udivmodhi4_ep>

00000770 <__udivmodhi4_loop>:
 770:	aa 1f       	adc	r26, r26
 772:	bb 1f       	adc	r27, r27
 774:	a6 17       	cp	r26, r22
 776:	b7 07       	cpc	r27, r23
 778:	10 f0       	brcs	.+4      	; 0x77e <__udivmodhi4_ep>
 77a:	a6 1b       	sub	r26, r22
 77c:	b7 0b       	sbc	r27, r23

0000077e <__udivmodhi4_ep>:
 77e:	88 1f       	adc	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	5a 95       	dec	r21
 784:	a9 f7       	brne	.-22     	; 0x770 <__udivmodhi4_loop>
 786:	80 95       	com	r24
 788:	90 95       	com	r25
 78a:	bc 01       	movw	r22, r24
 78c:	cd 01       	movw	r24, r26
 78e:	08 95       	ret

00000790 <__itoa_ncheck>:
 790:	bb 27       	eor	r27, r27
 792:	4a 30       	cpi	r20, 0x0A	; 10
 794:	31 f4       	brne	.+12     	; 0x7a2 <__itoa_ncheck+0x12>
 796:	99 23       	and	r25, r25
 798:	22 f4       	brpl	.+8      	; 0x7a2 <__itoa_ncheck+0x12>
 79a:	bd e2       	ldi	r27, 0x2D	; 45
 79c:	90 95       	com	r25
 79e:	81 95       	neg	r24
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__utoa_common>

000007a6 <__utoa_ncheck>:
 7a6:	bb 27       	eor	r27, r27

000007a8 <__utoa_common>:
 7a8:	fb 01       	movw	r30, r22
 7aa:	55 27       	eor	r21, r21
 7ac:	aa 27       	eor	r26, r26
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	aa 1f       	adc	r26, r26
 7b4:	a4 17       	cp	r26, r20
 7b6:	10 f0       	brcs	.+4      	; 0x7bc <__utoa_common+0x14>
 7b8:	a4 1b       	sub	r26, r20
 7ba:	83 95       	inc	r24
 7bc:	50 51       	subi	r21, 0x10	; 16
 7be:	b9 f7       	brne	.-18     	; 0x7ae <__utoa_common+0x6>
 7c0:	a0 5d       	subi	r26, 0xD0	; 208
 7c2:	aa 33       	cpi	r26, 0x3A	; 58
 7c4:	08 f0       	brcs	.+2      	; 0x7c8 <__utoa_common+0x20>
 7c6:	a9 5d       	subi	r26, 0xD9	; 217
 7c8:	a1 93       	st	Z+, r26
 7ca:	00 97       	sbiw	r24, 0x00	; 0
 7cc:	79 f7       	brne	.-34     	; 0x7ac <__utoa_common+0x4>
 7ce:	b1 11       	cpse	r27, r1
 7d0:	b1 93       	st	Z+, r27
 7d2:	11 92       	st	Z+, r1
 7d4:	cb 01       	movw	r24, r22
 7d6:	0c 94 ed 03 	jmp	0x7da	; 0x7da <strrev>

000007da <strrev>:
 7da:	dc 01       	movw	r26, r24
 7dc:	fc 01       	movw	r30, r24
 7de:	67 2f       	mov	r22, r23
 7e0:	71 91       	ld	r23, Z+
 7e2:	77 23       	and	r23, r23
 7e4:	e1 f7       	brne	.-8      	; 0x7de <strrev+0x4>
 7e6:	32 97       	sbiw	r30, 0x02	; 2
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <strrev+0x18>
 7ea:	7c 91       	ld	r23, X
 7ec:	6d 93       	st	X+, r22
 7ee:	70 83       	st	Z, r23
 7f0:	62 91       	ld	r22, -Z
 7f2:	ae 17       	cp	r26, r30
 7f4:	bf 07       	cpc	r27, r31
 7f6:	c8 f3       	brcs	.-14     	; 0x7ea <strrev+0x10>
 7f8:	08 95       	ret

000007fa <_exit>:
 7fa:	f8 94       	cli

000007fc <__stop_program>:
 7fc:	ff cf       	rjmp	.-2      	; 0x7fc <__stop_program>
