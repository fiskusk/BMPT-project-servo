
servo_v0.01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000818  000008ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080015c  0080015c  00000908  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000168e  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0d  00000000  00000000  0000212e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c34  00000000  00000000  00002c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00003870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000549  00000000  00000000  00003b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000baf  00000000  00000000  000040bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004c6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_1>
   8:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 36       	cpi	r26, 0x67	; 103
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <main>
  9e:	0c 94 0a 04 	jmp	0x814	; 0x814 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <transfer>:

.global transfer
.func transfer

transfer:
	push r16
  a6:	0f 93       	push	r16
	push r17
  a8:	1f 93       	push	r17

	ldi r17, 0b101
  aa:	15 e0       	ldi	r17, 0x05	; 5
	ldi r16, 0b11011100
  ac:	0c ed       	ldi	r16, 0xDC	; 220

	sub r24, r16
  ae:	80 1b       	sub	r24, r16
	sbc r25, r17
  b0:	91 0b       	sbc	r25, r17

	pop r17
  b2:	1f 91       	pop	r17
	pop r16
  b4:	0f 91       	pop	r16

	ret
  b6:	08 95       	ret

000000b8 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  b8:	40 9a       	sbi	0x08, 0	; 8
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <toggle_e+0x4>
  c0:	00 00       	nop
  c2:	40 98       	cbi	0x08, 0	; 8
  c4:	08 95       	ret

000000c6 <lcd_write>:
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
  ca:	66 23       	and	r22, r22
  cc:	11 f0       	breq	.+4      	; 0xd2 <lcd_write+0xc>
  ce:	28 9a       	sbi	0x05, 0	; 5
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <lcd_write+0xe>
  d2:	28 98       	cbi	0x05, 0	; 5
  d4:	2d 98       	cbi	0x05, 5	; 5
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	55 9a       	sbi	0x0a, 5	; 10
  da:	56 9a       	sbi	0x0a, 6	; 10
  dc:	57 9a       	sbi	0x0a, 7	; 10
  de:	5f 98       	cbi	0x0b, 7	; 11
  e0:	5e 98       	cbi	0x0b, 6	; 11
  e2:	5d 98       	cbi	0x0b, 5	; 11
  e4:	5c 98       	cbi	0x0b, 4	; 11
  e6:	cc 23       	and	r28, r28
  e8:	0c f4       	brge	.+2      	; 0xec <lcd_write+0x26>
  ea:	5f 9a       	sbi	0x0b, 7	; 11
  ec:	c6 fd       	sbrc	r28, 6
  ee:	5e 9a       	sbi	0x0b, 6	; 11
  f0:	c5 fd       	sbrc	r28, 5
  f2:	5d 9a       	sbi	0x0b, 5	; 11
  f4:	c4 fd       	sbrc	r28, 4
  f6:	5c 9a       	sbi	0x0b, 4	; 11
  f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
  fc:	5f 98       	cbi	0x0b, 7	; 11
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	5d 98       	cbi	0x0b, 5	; 11
 102:	5c 98       	cbi	0x0b, 4	; 11
 104:	c3 fd       	sbrc	r28, 3
 106:	5f 9a       	sbi	0x0b, 7	; 11
 108:	c2 fd       	sbrc	r28, 2
 10a:	5e 9a       	sbi	0x0b, 6	; 11
 10c:	c1 fd       	sbrc	r28, 1
 10e:	5d 9a       	sbi	0x0b, 5	; 11
 110:	c0 fd       	sbrc	r28, 0
 112:	5c 9a       	sbi	0x0b, 4	; 11
 114:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 118:	5c 9a       	sbi	0x0b, 4	; 11
 11a:	5d 9a       	sbi	0x0b, 5	; 11
 11c:	5e 9a       	sbi	0x0b, 6	; 11
 11e:	5f 9a       	sbi	0x0b, 7	; 11
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <lcd_read>:
 124:	88 23       	and	r24, r24
 126:	11 f0       	breq	.+4      	; 0x12c <lcd_read+0x8>
 128:	28 9a       	sbi	0x05, 0	; 5
 12a:	01 c0       	rjmp	.+2      	; 0x12e <lcd_read+0xa>
 12c:	28 98       	cbi	0x05, 0	; 5
 12e:	2d 9a       	sbi	0x05, 5	; 5
 130:	54 98       	cbi	0x0a, 4	; 10
 132:	55 98       	cbi	0x0a, 5	; 10
 134:	56 98       	cbi	0x0a, 6	; 10
 136:	57 98       	cbi	0x0a, 7	; 10
 138:	40 9a       	sbi	0x08, 0	; 8
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_read+0x18>
 140:	00 00       	nop
 142:	4c 9b       	sbis	0x09, 4	; 9
 144:	02 c0       	rjmp	.+4      	; 0x14a <lcd_read+0x26>
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	01 c0       	rjmp	.+2      	; 0x14c <lcd_read+0x28>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	4d 99       	sbic	0x09, 5	; 9
 14e:	80 62       	ori	r24, 0x20	; 32
 150:	4e 99       	sbic	0x09, 6	; 9
 152:	80 64       	ori	r24, 0x40	; 64
 154:	4f 99       	sbic	0x09, 7	; 9
 156:	80 68       	ori	r24, 0x80	; 128
 158:	40 98       	cbi	0x08, 0	; 8
 15a:	95 e0       	ldi	r25, 0x05	; 5
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_read+0x38>
 160:	00 00       	nop
 162:	40 9a       	sbi	0x08, 0	; 8
 164:	95 e0       	ldi	r25, 0x05	; 5
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_read+0x42>
 16a:	00 00       	nop
 16c:	4c 99       	sbic	0x09, 4	; 9
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	4d 99       	sbic	0x09, 5	; 9
 172:	82 60       	ori	r24, 0x02	; 2
 174:	4e 99       	sbic	0x09, 6	; 9
 176:	84 60       	ori	r24, 0x04	; 4
 178:	4f 99       	sbic	0x09, 7	; 9
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	40 98       	cbi	0x08, 0	; 8
 17e:	08 95       	ret

00000180 <lcd_waitbusy>:
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 92 00 	call	0x124	; 0x124 <lcd_read>
 186:	88 23       	and	r24, r24
 188:	dc f3       	brlt	.-10     	; 0x180 <lcd_waitbusy>
 18a:	85 e1       	ldi	r24, 0x15	; 21
 18c:	8a 95       	dec	r24
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_waitbusy+0xc>
 190:	00 00       	nop
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 92 00 	call	0x124	; 0x124 <lcd_read>
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
 19e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_waitbusy>
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	8c 2f       	mov	r24, r28
 1a6:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write>
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd_data>:
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
 1b2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_waitbusy>
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	8c 2f       	mov	r24, r28
 1ba:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write>
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_gotoxy>:
 1c2:	61 11       	cpse	r22, r1
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <lcd_gotoxy+0xc>
 1c6:	80 58       	subi	r24, 0x80	; 128
 1c8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1cc:	08 95       	ret
 1ce:	80 54       	subi	r24, 0x40	; 64
 1d0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1d4:	08 95       	ret

000001d6 <lcd_clrscr>:
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1dc:	08 95       	ret

000001de <lcd_putc>:
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
 1e2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_waitbusy>
 1e6:	ca 30       	cpi	r28, 0x0A	; 10
 1e8:	49 f4       	brne	.+18     	; 0x1fc <lcd_putc+0x1e>
 1ea:	80 34       	cpi	r24, 0x40	; 64
 1ec:	10 f0       	brcs	.+4      	; 0x1f2 <lcd_putc+0x14>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <lcd_putc+0x16>
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	80 58       	subi	r24, 0x80	; 128
 1f6:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <lcd_putc+0x26>
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write>
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <lcd_puts>:
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
 20e:	21 96       	adiw	r28, 0x01	; 1
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	29 f0       	breq	.+10     	; 0x222 <lcd_puts+0x1a>
 218:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
 21c:	89 91       	ld	r24, Y+
 21e:	81 11       	cpse	r24, r1
 220:	fb cf       	rjmp	.-10     	; 0x218 <lcd_puts+0x10>
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 228:	cf 93       	push	r28
 22a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 22c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 22e:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 230:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 232:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 234:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 236:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 238:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	99 ef       	ldi	r25, 0xF9	; 249
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_init+0x16>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_init+0x1c>
 244:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 246:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 248:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 24a:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 24e:	8f e1       	ldi	r24, 0x1F	; 31
 250:	9e e4       	ldi	r25, 0x4E	; 78
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x2a>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x30>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 25a:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd_init+0x3a>
 266:	00 c0       	rjmp	.+0      	; 0x268 <lcd_init+0x40>
 268:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 26a:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_init+0x4a>
 276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_init+0x50>
 278:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 27a:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 27c:	0e 94 5c 00 	call	0xb8	; 0xb8 <toggle_e>
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x5c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_init+0x62>
 28a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 28c:	88 e2       	ldi	r24, 0x28	; 40
 28e:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 292:	88 e0       	ldi	r24, 0x08	; 8
 294:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                           /* display clear                */
 298:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>

}/* lcd_init */
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <show>:
*
*********************************************************************************/
void show()
{

    itoa(d,buffer,10);          // conversion numerical system from d to buffer. Third parameter define desired numerical system.
 2ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 2b0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2b4:	4a e0       	ldi	r20, 0x0A	; 10
 2b6:	6e e5       	ldi	r22, 0x5E	; 94
 2b8:	71 e0       	ldi	r23, 0x01	; 1
 2ba:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__itoa_ncheck>
    lcd_gotoxy(6,0);            // go to line 1 and 0 character
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
    lcd_puts(buffer);           // and print content of buffer (pulse width)
 2c6:	8e e5       	ldi	r24, 0x5E	; 94
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
    lcd_puts("us ");            // print units
 2ce:	83 e1       	ldi	r24, 0x13	; 19
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>

    lcd_gotoxy(6,1);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
    itoa(transfer(d)/10,buffer,10);
 2de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 2e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 2e6:	0e 94 53 00 	call	0xa6	; 0xa6 <transfer>
 2ea:	6a e0       	ldi	r22, 0x0A	; 10
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	0e 94 ad 03 	call	0x75a	; 0x75a <__divmodhi4>
 2f2:	cb 01       	movw	r24, r22
 2f4:	4a e0       	ldi	r20, 0x0A	; 10
 2f6:	6e e5       	ldi	r22, 0x5E	; 94
 2f8:	71 e0       	ldi	r23, 0x01	; 1
 2fa:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__itoa_ncheck>
    lcd_puts(buffer);
 2fe:	8e e5       	ldi	r24, 0x5E	; 94
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
    lcd_putc(',');
 306:	8c e2       	ldi	r24, 0x2C	; 44
 308:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
    itoa(abs(transfer(d)) % 10,buffer,10);
 30c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 310:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 314:	0e 94 53 00 	call	0xa6	; 0xa6 <transfer>
 318:	99 23       	and	r25, r25
 31a:	1c f4       	brge	.+6      	; 0x322 <show+0x76>
 31c:	91 95       	neg	r25
 31e:	81 95       	neg	r24
 320:	91 09       	sbc	r25, r1
 322:	6a e0       	ldi	r22, 0x0A	; 10
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	0e 94 ad 03 	call	0x75a	; 0x75a <__divmodhi4>
 32a:	4a e0       	ldi	r20, 0x0A	; 10
 32c:	6e e5       	ldi	r22, 0x5E	; 94
 32e:	71 e0       	ldi	r23, 0x01	; 1
 330:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__itoa_ncheck>
    lcd_puts(buffer);
 334:	8e e5       	ldi	r24, 0x5E	; 94
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
    lcd_putc(0b11011111);
 33c:	8f ed       	ldi	r24, 0xDF	; 223
 33e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
    lcd_puts(" ");
 342:	8a e1       	ldi	r24, 0x1A	; 26
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>

    /*print step size */
    if (step == 100)                //first goto xy based on size of value step size
 34a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 34e:	84 36       	cpi	r24, 0x64	; 100
 350:	29 f4       	brne	.+10     	; 0x35c <show+0xb0>
        lcd_gotoxy(13,1);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	8d e0       	ldi	r24, 0x0D	; 13
 356:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
 35a:	27 c0       	rjmp	.+78     	; 0x3aa <show+0xfe>
    else if ((step == 50) | (step == 20) | (step == 10)){
 35c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 360:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 364:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	82 33       	cpi	r24, 0x32	; 50
 36c:	09 f0       	breq	.+2      	; 0x370 <show+0xc4>
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	24 31       	cpi	r18, 0x14	; 20
 374:	09 f0       	breq	.+2      	; 0x378 <show+0xcc>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	89 2b       	or	r24, r25
 37a:	31 f4       	brne	.+12     	; 0x388 <show+0xdc>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	3a 30       	cpi	r19, 0x0A	; 10
 380:	09 f0       	breq	.+2      	; 0x384 <show+0xd8>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	88 23       	and	r24, r24
 386:	49 f0       	breq	.+18     	; 0x39a <show+0xee>
        lcd_puts("   ");
 388:	88 e1       	ldi	r24, 0x18	; 24
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
        lcd_gotoxy(14,1);}
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	8e e0       	ldi	r24, 0x0E	; 14
 394:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
 398:	08 c0       	rjmp	.+16     	; 0x3aa <show+0xfe>
    else{
        lcd_puts("    ");
 39a:	87 e1       	ldi	r24, 0x17	; 23
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
        lcd_gotoxy(15,1);}
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	8f e0       	ldi	r24, 0x0F	; 15
 3a6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
    itoa(step,buffer,10);            // convert again, now step, save to buffer, decimal num. system
 3aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3ae:	4a e0       	ldi	r20, 0x0A	; 10
 3b0:	6e e5       	ldi	r22, 0x5E	; 94
 3b2:	71 e0       	ldi	r23, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__itoa_ncheck>
    lcd_puts(buffer);                // print step and two spaces
 3ba:	8e e5       	ldi	r24, 0x5E	; 94
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
    lcd_puts("  ");
 3c2:	89 e1       	ldi	r24, 0x19	; 25
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
 3ca:	08 95       	ret

000003cc <setup>:
*                  registers for PORTs, interrupts, display initialization
*
*********************************************************************************/

void setup()
{
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	60 97       	sbiw	r28, 0x10	; 16
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
    // Setup for used PORTS
    DDRB |= 1<<2;                   // set bit PB2 as output port for servo
 3e8:	22 9a       	sbi	0x04, 2	; 4
    DDRB &= ~(1<<1);                // set bit PB1 as input for rotary encoder
 3ea:	21 98       	cbi	0x04, 1	; 4
    DDRD &= ~(1<<2);                // set bit PD2 as input for rotary encoder
 3ec:	52 98       	cbi	0x0a, 2	; 10
    DDRD &= ~(1<<3);                // set bit PD3 as input step size button
 3ee:	53 98       	cbi	0x0a, 3	; 10
    DDRB &= ~(1<<3);                // set bit PB3 as input reset pulse
 3f0:	23 98       	cbi	0x04, 3	; 4
    PORTD |= 1<<2;                  // activate internal pull-up resistors on bit PD2
 3f2:	5a 9a       	sbi	0x0b, 2	; 11
    PORTD |= 1<<3;                  // activate internal pull-up resistors on bit PD3
 3f4:	5b 9a       	sbi	0x0b, 3	; 11
    PORTB |= 1<<1;                  // activate internal pull-up resistors on bit PB1
 3f6:	29 9a       	sbi	0x05, 1	; 5
    PORTB |= 1<<3;                  // activate internal pull-up resistors on bit PB3
 3f8:	2b 9a       	sbi	0x05, 3	; 5

    uart_init();
 3fa:	0e 94 76 03 	call	0x6ec	; 0x6ec <uart_init>

    /* MOD 9 Phase correct */
    TCCR1A = (1<<WGM10) | (1<<COM1B1);
 3fe:	81 e2       	ldi	r24, 0x21	; 33
 400:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<WGM13) | (1<<CS11);
 404:	82 e1       	ldi	r24, 0x12	; 18
 406:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

    //setup interrupt OCIEA
    //TIMSK1 |= 1<<OCIE1A;

    // setup interrupt for rotary encoder
    EICRA |= 1<<ISC01;               // the falling edge on INT0 (PD2) generate interrupt request
 40a:	e9 e6       	ldi	r30, 0x69	; 105
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	82 60       	ori	r24, 0x02	; 2
 412:	80 83       	st	Z, r24
    EIMSK |= 1<<INT0;                // enable external interrupt request from INT0 (PD2)
 414:	e8 9a       	sbi	0x1d, 0	; 29

    // setup interupt for step size button
    EICRA |= 1<<ISC11;               // the falling edge on INT1 (PD3) generate interrupt request
 416:	80 81       	ld	r24, Z
 418:	88 60       	ori	r24, 0x08	; 8
 41a:	80 83       	st	Z, r24
    EIMSK |= 1<<INT1;                // enable external interrupt request from INT1 (PD3)
 41c:	e9 9a       	sbi	0x1d, 1	; 29

    sei();                           // enable all interrupts
 41e:	78 94       	sei

    // display initialization
    lcd_init(LCD_DISP_ON);           // display on
 420:	8c e0       	ldi	r24, 0x0C	; 12
 422:	0e 94 14 01 	call	0x228	; 0x228 <lcd_init>

    /* Add new symbol  up and down */
    char new_symbol[] = {
 426:	80 e1       	ldi	r24, 0x10	; 16
 428:	e3 e0       	ldi	r30, 0x03	; 3
 42a:	f1 e0       	ldi	r31, 0x01	; 1
 42c:	de 01       	movw	r26, r28
 42e:	11 96       	adiw	r26, 0x01	; 1
 430:	01 90       	ld	r0, Z+
 432:	0d 92       	st	X+, r0
 434:	8a 95       	dec	r24
 436:	e1 f7       	brne	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        0b10101,
        0b01110,
        0b00100
    };

    lcd_command(1<<LCD_CGRAM);
 438:	80 e4       	ldi	r24, 0x40	; 64
 43a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 43e:	8e 01       	movw	r16, r28
 440:	0f 5f       	subi	r16, 0xFF	; 255
 442:	1f 4f       	sbci	r17, 0xFF	; 255
 444:	7e 01       	movw	r14, r28
 446:	81 e1       	ldi	r24, 0x11	; 17
 448:	e8 0e       	add	r14, r24
 44a:	f1 1c       	adc	r15, r1
    for (uint8_t i = 0; i < 16; i++)
        lcd_data(new_symbol[i]);
 44c:	f8 01       	movw	r30, r16
 44e:	81 91       	ld	r24, Z+
 450:	8f 01       	movw	r16, r30
 452:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_data>
        0b01110,
        0b00100
    };

    lcd_command(1<<LCD_CGRAM);
    for (uint8_t i = 0; i < 16; i++)
 456:	0e 15       	cp	r16, r14
 458:	1f 05       	cpc	r17, r15
 45a:	c1 f7       	brne	.-16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
        lcd_data(new_symbol[i]);

    /* print introduction */
    lcd_clrscr();                   // clear display
 45c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_clrscr>
    lcd_gotoxy(0,0);                // go to zero line and zero character
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
    lcd_puts("Width");              // print on display text
 468:	8c e1       	ldi	r24, 0x1C	; 28
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
    lcd_gotoxy(0,1);
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
    lcd_puts("Angle");
 478:	82 e2       	ldi	r24, 0x22	; 34
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
    lcd_gotoxy(13,0);
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	8d e0       	ldi	r24, 0x0D	; 13
 484:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
    lcd_puts("St");
 488:	88 e2       	ldi	r24, 0x28	; 40
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
    lcd_putc(1);
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>

    // set period T = 20 ms, f = 50 Hz. This is define TOP of counter.
    OCR1A = 20000;
 496:	80 e2       	ldi	r24, 0x20	; 32
 498:	9e e4       	ldi	r25, 0x4E	; 78
 49a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 49e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}
 4a2:	60 96       	adiw	r28, 0x10	; 16
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	ef 90       	pop	r14
 4ba:	08 95       	ret

000004bc <main>:


int main(void)
{
    setup();                        // system initialization
 4bc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <setup>
    uart_puts("LOOP\n");
 4c0:	8b e2       	ldi	r24, 0x2B	; 43
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 92 03 	call	0x724	; 0x724 <uart_puts>
    while (1)
    {
        set_duty(d);                // set OCR1B registers bit which define d = tON time PWM waveform
 4c8:	ca e8       	ldi	r28, 0x8A	; 138
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
 4cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 4d0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 4d4:	99 83       	std	Y+1, r25	; 0x01
 4d6:	88 83       	st	Y, r24
        show(d);                    // print the pulse width d = tON  on the display
 4d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 4dc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 4e0:	0e 94 56 01 	call	0x2ac	; 0x2ac <show>
 4e4:	f3 cf       	rjmp	.-26     	; 0x4cc <main+0x10>

000004e6 <__vector_1>:
* Function Name : INT0_vect
* Description    : interrupt from INT1 service rotary encoder on PB1 (up/dw) and PD2 (INT0)
*
*********************************************************************************/
ISR(INT0_vect)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
    cli();
 508:	f8 94       	cli
	uart_puts("INT0 ");
 50a:	81 e3       	ldi	r24, 0x31	; 49
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 92 03 	call	0x724	; 0x724 <uart_puts>
    /* ternary operation, which fill variable s value = step*either -1, if PINB1 is in HI, or +1, if PINB1 is in LOW */
    int16_t s = step * ((PINB & (1<<1)) ? -1 : 1);
 512:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	19 99       	sbic	0x03, 1	; 3
 51a:	03 c0       	rjmp	.+6      	; 0x522 <__vector_1+0x3c>
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <__vector_1+0x40>
 522:	4f ef       	ldi	r20, 0xFF	; 255
 524:	5f ef       	ldi	r21, 0xFF	; 255
 526:	48 9f       	mul	r20, r24
 528:	90 01       	movw	r18, r0
 52a:	49 9f       	mul	r20, r25
 52c:	30 0d       	add	r19, r0
 52e:	58 9f       	mul	r21, r24
 530:	30 0d       	add	r19, r0
 532:	11 24       	eor	r1, r1

    /* if new d after do this routine is in range from 615 to 2100 -> do routine. s > or < 0 shows if new value will increment or decrement  */
    if (( (d+step) <= 2100 && s > 0 ) || ( (d-step) >= 615 && s < 0 ))
 534:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 538:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 53c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 540:	84 0f       	add	r24, r20
 542:	91 1d       	adc	r25, r1
 544:	85 33       	cpi	r24, 0x35	; 53
 546:	98 40       	sbci	r25, 0x08	; 8
 548:	20 f4       	brcc	.+8      	; 0x552 <__vector_1+0x6c>
 54a:	12 16       	cp	r1, r18
 54c:	13 06       	cpc	r1, r19
 54e:	74 f0       	brlt	.+28     	; 0x56c <__vector_1+0x86>
 550:	29 c0       	rjmp	.+82     	; 0x5a4 <__vector_1+0xbe>
 552:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 556:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 55a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 55e:	84 1b       	sub	r24, r20
 560:	91 09       	sbc	r25, r1
 562:	87 36       	cpi	r24, 0x67	; 103
 564:	92 40       	sbci	r25, 0x02	; 2
 566:	68 f0       	brcs	.+26     	; 0x582 <__vector_1+0x9c>
 568:	33 23       	and	r19, r19
 56a:	5c f4       	brge	.+22     	; 0x582 <__vector_1+0x9c>
        d += s;                    // routine: fill with new value d+s
 56c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 570:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 574:	28 0f       	add	r18, r24
 576:	39 1f       	adc	r19, r25
 578:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <d+0x1>
 57c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <d>
 580:	0f c0       	rjmp	.+30     	; 0x5a0 <__vector_1+0xba>
    else
        d = (s > 0) ? 2100 : 615;  // else in range from 615 to 2100 set fixed value
 582:	12 16       	cp	r1, r18
 584:	13 06       	cpc	r1, r19
 586:	1c f0       	brlt	.+6      	; 0x58e <__vector_1+0xa8>
 588:	87 e6       	ldi	r24, 0x67	; 103
 58a:	92 e0       	ldi	r25, 0x02	; 2
 58c:	05 c0       	rjmp	.+10     	; 0x598 <__vector_1+0xb2>
 58e:	84 e3       	ldi	r24, 0x34	; 52
 590:	98 e0       	ldi	r25, 0x08	; 8
 592:	02 c0       	rjmp	.+4      	; 0x598 <__vector_1+0xb2>
 594:	87 e6       	ldi	r24, 0x67	; 103
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <d+0x1>
 59c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <d>
	sei();
 5a0:	78 94       	sei
}
 5a2:	10 c0       	rjmp	.+32     	; 0x5c4 <__vector_1+0xde>
	uart_puts("INT0 ");
    /* ternary operation, which fill variable s value = step*either -1, if PINB1 is in HI, or +1, if PINB1 is in LOW */
    int16_t s = step * ((PINB & (1<<1)) ? -1 : 1);

    /* if new d after do this routine is in range from 615 to 2100 -> do routine. s > or < 0 shows if new value will increment or decrement  */
    if (( (d+step) <= 2100 && s > 0 ) || ( (d-step) >= 615 && s < 0 ))
 5a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <d>
 5a8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <d+0x1>
 5ac:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 5b0:	84 1b       	sub	r24, r20
 5b2:	91 09       	sbc	r25, r1
 5b4:	87 36       	cpi	r24, 0x67	; 103
 5b6:	92 40       	sbci	r25, 0x02	; 2
 5b8:	68 f3       	brcs	.-38     	; 0x594 <__vector_1+0xae>
 5ba:	33 23       	and	r19, r19
 5bc:	bc f2       	brlt	.-82     	; 0x56c <__vector_1+0x86>
        d += s;                    // routine: fill with new value d+s
    else
        d = (s > 0) ? 2100 : 615;  // else in range from 615 to 2100 set fixed value
 5be:	87 e6       	ldi	r24, 0x67	; 103
 5c0:	92 e0       	ldi	r25, 0x02	; 2
 5c2:	ea cf       	rjmp	.-44     	; 0x598 <__vector_1+0xb2>
	sei();
}
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	bf 91       	pop	r27
 5ca:	af 91       	pop	r26
 5cc:	9f 91       	pop	r25
 5ce:	8f 91       	pop	r24
 5d0:	7f 91       	pop	r23
 5d2:	6f 91       	pop	r22
 5d4:	5f 91       	pop	r21
 5d6:	4f 91       	pop	r20
 5d8:	3f 91       	pop	r19
 5da:	2f 91       	pop	r18
 5dc:	0f 90       	pop	r0
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	0f 90       	pop	r0
 5e2:	1f 90       	pop	r1
 5e4:	18 95       	reti

000005e6 <__vector_2>:
* Function Name : INT1_vect
* Description    : interrupt from INT1 service change step size on PD3 (INT1)
*
*********************************************************************************/
ISR(INT1_vect)
{
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
    cli();
 608:	f8 94       	cli
	static uint8_t status = 0;                // preset status of step size
    uart_puts("set_step button INT1 ");
 60a:	87 e3       	ldi	r24, 0x37	; 55
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 92 03 	call	0x724	; 0x724 <uart_puts>
    switch(status)
 612:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	69 f0       	breq	.+26     	; 0x634 <__vector_2+0x4e>
 61a:	28 f0       	brcs	.+10     	; 0x626 <__vector_2+0x40>
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	89 f0       	breq	.+34     	; 0x642 <__vector_2+0x5c>
 620:	83 30       	cpi	r24, 0x03	; 3
 622:	b1 f0       	breq	.+44     	; 0x650 <__vector_2+0x6a>
 624:	1c c0       	rjmp	.+56     	; 0x65e <__vector_2+0x78>
    {
        case 0:
            step = 5;
 626:	85 e0       	ldi	r24, 0x05	; 5
 628:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            status=1;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
            break;
 632:	1a c0       	rjmp	.+52     	; 0x668 <__vector_2+0x82>
        case 1:
            step = 10;
 634:	8a e0       	ldi	r24, 0x0A	; 10
 636:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            status=2;
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
            break;
 640:	13 c0       	rjmp	.+38     	; 0x668 <__vector_2+0x82>
        case 2:
            step = 20;
 642:	84 e1       	ldi	r24, 0x14	; 20
 644:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            status=3;
 648:	83 e0       	ldi	r24, 0x03	; 3
 64a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
            break;
 64e:	0c c0       	rjmp	.+24     	; 0x668 <__vector_2+0x82>
        case 3:
            step = 50;
 650:	82 e3       	ldi	r24, 0x32	; 50
 652:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            status=4;
 656:	84 e0       	ldi	r24, 0x04	; 4
 658:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
            break;
 65c:	05 c0       	rjmp	.+10     	; 0x668 <__vector_2+0x82>
        default:
            step = 100;
 65e:	84 e6       	ldi	r24, 0x64	; 100
 660:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            status = 0;
 664:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
    }
	sei();
 668:	78 94       	sei
}
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	bf 91       	pop	r27
 670:	af 91       	pop	r26
 672:	9f 91       	pop	r25
 674:	8f 91       	pop	r24
 676:	7f 91       	pop	r23
 678:	6f 91       	pop	r22
 67a:	5f 91       	pop	r21
 67c:	4f 91       	pop	r20
 67e:	3f 91       	pop	r19
 680:	2f 91       	pop	r18
 682:	0f 90       	pop	r0
 684:	0f be       	out	0x3f, r0	; 63
 686:	0f 90       	pop	r0
 688:	1f 90       	pop	r1
 68a:	18 95       	reti

0000068c <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 68c:	1f 92       	push	r1
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	2f 93       	push	r18
 698:	3f 93       	push	r19
 69a:	4f 93       	push	r20
 69c:	5f 93       	push	r21
 69e:	6f 93       	push	r22
 6a0:	7f 93       	push	r23
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	af 93       	push	r26
 6a8:	bf 93       	push	r27
 6aa:	ef 93       	push	r30
 6ac:	ff 93       	push	r31
    cli();
 6ae:	f8 94       	cli
	//uart_puts("TIMER1 COMPA ");
    if (bit_is_clear(PINB,3))
 6b0:	1b 99       	sbic	0x03, 3	; 3
 6b2:	0a c0       	rjmp	.+20     	; 0x6c8 <__vector_11+0x3c>
	{
		uart_puts("TIMER1 COMPA ");
 6b4:	8d e4       	ldi	r24, 0x4D	; 77
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	0e 94 92 03 	call	0x724	; 0x724 <uart_puts>
		d = 1500;
 6bc:	8c ed       	ldi	r24, 0xDC	; 220
 6be:	95 e0       	ldi	r25, 0x05	; 5
 6c0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <d+0x1>
 6c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <d>
	}
	sei();
 6c8:	78 94       	sei
}
 6ca:	ff 91       	pop	r31
 6cc:	ef 91       	pop	r30
 6ce:	bf 91       	pop	r27
 6d0:	af 91       	pop	r26
 6d2:	9f 91       	pop	r25
 6d4:	8f 91       	pop	r24
 6d6:	7f 91       	pop	r23
 6d8:	6f 91       	pop	r22
 6da:	5f 91       	pop	r21
 6dc:	4f 91       	pop	r20
 6de:	3f 91       	pop	r19
 6e0:	2f 91       	pop	r18
 6e2:	0f 90       	pop	r0
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	0f 90       	pop	r0
 6e8:	1f 90       	pop	r1
 6ea:	18 95       	reti

000006ec <uart_init>:
    #define F_CPU 16000000UL
#endif

void uart_init(void)
{
    UBRR0 = 16;
 6ec:	80 e1       	ldi	r24, 0x10	; 16
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 6f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0A = 1<<U2X0;                  // double speed mode
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    UCSR0B = (1<<RXEN0) | (1<<TXEN0);  // enable receiver and transmitter
 6fe:	e1 ec       	ldi	r30, 0xC1	; 193
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	88 e1       	ldi	r24, 0x18	; 24
 704:	80 83       	st	Z, r24
    UCSR0C = 3<<UCSZ00;                // 8n1
 706:	86 e0       	ldi	r24, 0x06	; 6
 708:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    UCSR0B |= 1<<RXCIE0;               // receiver interrupt
 70c:	80 81       	ld	r24, Z
 70e:	80 68       	ori	r24, 0x80	; 128
 710:	80 83       	st	Z, r24
 712:	08 95       	ret

00000714 <uart_putc>:
}

void uart_putc(char data)
{
    while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer
 714:	e0 ec       	ldi	r30, 0xC0	; 192
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	90 81       	ld	r25, Z
 71a:	95 ff       	sbrs	r25, 5
 71c:	fd cf       	rjmp	.-6      	; 0x718 <uart_putc+0x4>
    UDR0 = data;                       // Put data into buffer, sends the data
 71e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 722:	08 95       	ret

00000724 <uart_puts>:
}

void uart_puts(char str[])
{
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	ec 01       	movw	r28, r24
    static uint8_t cnt = 0;
	if (cnt++ == 10) {uart_putc('\n'); cnt=0;};
 72a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <cnt.1621>
 72e:	91 e0       	ldi	r25, 0x01	; 1
 730:	98 0f       	add	r25, r24
 732:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <cnt.1621>
 736:	8a 30       	cpi	r24, 0x0A	; 10
 738:	21 f4       	brne	.+8      	; 0x742 <uart_puts+0x1e>
 73a:	0e 94 8a 03 	call	0x714	; 0x714 <uart_putc>
 73e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <cnt.1621>
	for (int i=0; str[i]; i++)
 742:	88 81       	ld	r24, Y
 744:	88 23       	and	r24, r24
 746:	31 f0       	breq	.+12     	; 0x754 <uart_puts+0x30>
 748:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(str[i]);
 74a:	0e 94 8a 03 	call	0x714	; 0x714 <uart_putc>

void uart_puts(char str[])
{
    static uint8_t cnt = 0;
	if (cnt++ == 10) {uart_putc('\n'); cnt=0;};
	for (int i=0; str[i]; i++)
 74e:	89 91       	ld	r24, Y+
 750:	81 11       	cpse	r24, r1
 752:	fb cf       	rjmp	.-10     	; 0x74a <uart_puts+0x26>
        uart_putc(str[i]);
}
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	08 95       	ret

0000075a <__divmodhi4>:
 75a:	97 fb       	bst	r25, 7
 75c:	07 2e       	mov	r0, r23
 75e:	16 f4       	brtc	.+4      	; 0x764 <__divmodhi4+0xa>
 760:	00 94       	com	r0
 762:	07 d0       	rcall	.+14     	; 0x772 <__divmodhi4_neg1>
 764:	77 fd       	sbrc	r23, 7
 766:	09 d0       	rcall	.+18     	; 0x77a <__divmodhi4_neg2>
 768:	0e 94 c1 03 	call	0x782	; 0x782 <__udivmodhi4>
 76c:	07 fc       	sbrc	r0, 7
 76e:	05 d0       	rcall	.+10     	; 0x77a <__divmodhi4_neg2>
 770:	3e f4       	brtc	.+14     	; 0x780 <__divmodhi4_exit>

00000772 <__divmodhi4_neg1>:
 772:	90 95       	com	r25
 774:	81 95       	neg	r24
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	08 95       	ret

0000077a <__divmodhi4_neg2>:
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255

00000780 <__divmodhi4_exit>:
 780:	08 95       	ret

00000782 <__udivmodhi4>:
 782:	aa 1b       	sub	r26, r26
 784:	bb 1b       	sub	r27, r27
 786:	51 e1       	ldi	r21, 0x11	; 17
 788:	07 c0       	rjmp	.+14     	; 0x798 <__udivmodhi4_ep>

0000078a <__udivmodhi4_loop>:
 78a:	aa 1f       	adc	r26, r26
 78c:	bb 1f       	adc	r27, r27
 78e:	a6 17       	cp	r26, r22
 790:	b7 07       	cpc	r27, r23
 792:	10 f0       	brcs	.+4      	; 0x798 <__udivmodhi4_ep>
 794:	a6 1b       	sub	r26, r22
 796:	b7 0b       	sbc	r27, r23

00000798 <__udivmodhi4_ep>:
 798:	88 1f       	adc	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	5a 95       	dec	r21
 79e:	a9 f7       	brne	.-22     	; 0x78a <__udivmodhi4_loop>
 7a0:	80 95       	com	r24
 7a2:	90 95       	com	r25
 7a4:	bc 01       	movw	r22, r24
 7a6:	cd 01       	movw	r24, r26
 7a8:	08 95       	ret

000007aa <__itoa_ncheck>:
 7aa:	bb 27       	eor	r27, r27
 7ac:	4a 30       	cpi	r20, 0x0A	; 10
 7ae:	31 f4       	brne	.+12     	; 0x7bc <__itoa_ncheck+0x12>
 7b0:	99 23       	and	r25, r25
 7b2:	22 f4       	brpl	.+8      	; 0x7bc <__itoa_ncheck+0x12>
 7b4:	bd e2       	ldi	r27, 0x2D	; 45
 7b6:	90 95       	com	r25
 7b8:	81 95       	neg	r24
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__utoa_common>

000007c0 <__utoa_ncheck>:
 7c0:	bb 27       	eor	r27, r27

000007c2 <__utoa_common>:
 7c2:	fb 01       	movw	r30, r22
 7c4:	55 27       	eor	r21, r21
 7c6:	aa 27       	eor	r26, r26
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	aa 1f       	adc	r26, r26
 7ce:	a4 17       	cp	r26, r20
 7d0:	10 f0       	brcs	.+4      	; 0x7d6 <__utoa_common+0x14>
 7d2:	a4 1b       	sub	r26, r20
 7d4:	83 95       	inc	r24
 7d6:	50 51       	subi	r21, 0x10	; 16
 7d8:	b9 f7       	brne	.-18     	; 0x7c8 <__utoa_common+0x6>
 7da:	a0 5d       	subi	r26, 0xD0	; 208
 7dc:	aa 33       	cpi	r26, 0x3A	; 58
 7de:	08 f0       	brcs	.+2      	; 0x7e2 <__utoa_common+0x20>
 7e0:	a9 5d       	subi	r26, 0xD9	; 217
 7e2:	a1 93       	st	Z+, r26
 7e4:	00 97       	sbiw	r24, 0x00	; 0
 7e6:	79 f7       	brne	.-34     	; 0x7c6 <__utoa_common+0x4>
 7e8:	b1 11       	cpse	r27, r1
 7ea:	b1 93       	st	Z+, r27
 7ec:	11 92       	st	Z+, r1
 7ee:	cb 01       	movw	r24, r22
 7f0:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <strrev>

000007f4 <strrev>:
 7f4:	dc 01       	movw	r26, r24
 7f6:	fc 01       	movw	r30, r24
 7f8:	67 2f       	mov	r22, r23
 7fa:	71 91       	ld	r23, Z+
 7fc:	77 23       	and	r23, r23
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <strrev+0x4>
 800:	32 97       	sbiw	r30, 0x02	; 2
 802:	04 c0       	rjmp	.+8      	; 0x80c <strrev+0x18>
 804:	7c 91       	ld	r23, X
 806:	6d 93       	st	X+, r22
 808:	70 83       	st	Z, r23
 80a:	62 91       	ld	r22, -Z
 80c:	ae 17       	cp	r26, r30
 80e:	bf 07       	cpc	r27, r31
 810:	c8 f3       	brcs	.-14     	; 0x804 <strrev+0x10>
 812:	08 95       	ret

00000814 <_exit>:
 814:	f8 94       	cli

00000816 <__stop_program>:
 816:	ff cf       	rjmp	.-2      	; 0x816 <__stop_program>
